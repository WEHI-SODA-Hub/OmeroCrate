{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"omeROcrate","text":"<p>Integration layer between the OMERO image platform and RO-Crate metadata standard.</p>"},{"location":"#installation","title":"Installation","text":"<p>These instructions assume you're using uv.</p> <p>Create a project if you haven't already:</p> <pre><code>uv init\n</code></pre> <p>You may optionally want to install Glencoe's prebuilt binaries, e.g. <pre><code>uv pip install https://github.com/glencoesoftware/zeroc-ice-py-linux-x86_64/releases/download/20240202/zeroc_ice-3.6.5-cp39-cp39-manylinux_2_28_x86_64.whl\n</code></pre></p> <p>Then install using: <pre><code>uv add git+https://github.com/WEHI-SODA-Hub/OmeroCrate\n</code></pre></p>"},{"location":"#authentication","title":"Authentication","text":"<p>You will need to set the following environment variables:</p> <pre><code>export OMERO_PASSWORD=xxx\nexport OMERO_HOST=xxx\n</code></pre> <p>There are two other optional variables:</p> <ul> <li><code>OMERO_USER</code> defaults to the current username</li> <li><code>OMERO_PORT</code> defaults to 4064</li> </ul>"},{"location":"#simple-example","title":"Simple Example","text":"<p>With all the setup done, we can upload some data to OMERO.</p> <p>In this example we will use the Calcium Imaging data thanks to:</p> <p>Schr\u00f6der, M., Staehlke, S., Groth, P., Nebe, J. B., Spors, S., &amp; Kr\u00fcger, F. (2022). Structure-based knowledge acquisition from electronic lab notebooks for research data provenance documentation. Journal of Biomedical Semantics, 13. https://doi.org/10.1186/s13326-021-00257-x</p> <p>But you can use your own data instead.</p> <p>First we obtain the data:</p> <pre><code>git clone https://github.com/SFB-ELAINE/Ca-imaging-RO-Crate.git\n</code></pre> <p>Then we do a simple upload:</p> <pre><code>uv run omerocrate upload Ca-imaging-RO-Crate/\n</code></pre> <p>omeROcrate can do basic crate uploads without configuration.</p>"},{"location":"#advanced-example","title":"Advanced Example","text":"<p>RO-Crates are very flexible, which means that you probably use some extra types and properties that aren't handled by omeROcrate by default. Not to worry, you can quite easily customize it to suit your crates, via subclassing.</p> <p>For example, in the calcium imaging data, there are some entities that look a bit like this: <pre><code>{\n    \"@id\": \"Data/02_Bild-nach-Stimulation_5V_7.9Hz.jpg\",\n    \"@type\": \"File\",\n    \"https://schema.org/dateModified\": {\n        \"@type\": \"xsd:dateTime\",\n        \"@value\": \"2021-03-03T16:58:35\"\n    }\n}\n</code></pre></p> <p>When customizing omeROcrate, it is best to first look at OMERO's own metadata schema and decide if your metadata fits into one of the existing parts of the schema. If not, the metadata can always become an annotation.</p> <p>In this case, <code>dateModified</code> could be interpreted as the acquisition date of the image. If this is true, we could subclass <code>OmeroUploader</code> to handle this properly. For an example of this, refer to: https://github.com/WEHI-SODA-Hub/OmeroCrate/blob/no-xml/test/calcium_uploader.py</p> <p>Currently if you subclass <code>OmeroUploader</code>, you will have to perform the upload in Python:</p> <pre><code>uploader = CalciumUploader(\n    conn=connection,\n    crate=ca_imaging_1021\n)\ndataset = uploader.execute()\n</code></pre>"},{"location":"docs/alternatives/","title":"Alternatives","text":"<p>The core idea used here is that SPARQL queries can idiomatically map from RO-Crate JSON-LD to OMERO data structures. OMERO's schema is defined in terms of XML.</p> <p>One way to do this might be to have the user write SPARQL that maps to a structure similar to OMERO XML directly, and then use the RDF XML format to write XML, which then gets processed (to flatten out <code>&lt;rdf:Description&gt;</code> elements for example), which then gets ingested into OMERO. However, this probably won't work as we can't control how the choice between elements and attributes is made when serializing to RDF/XML.</p> <p>Another approach will be to generate a LinkML schema for OMERO using this PR, then generate Pydantic classes from that schema. The user will then write SPARQL that maps from RO-Crate to these Pydantic classes, which then get automatically mapped to XML and ingested into OMERO. Alternatively we could bypass XML and write a simple mapping layer for all the Pydantic classes.</p> <p>OMERO has a JSON API, which would be easy to map into, but the API doesn't support creating all entity types yet.</p>"},{"location":"docs/api/","title":"API Reference","text":""},{"location":"docs/api/#omerocrate.OmeroUploader","title":"<code>omerocrate.OmeroUploader</code>  <code>dataclass</code>","text":"<p>Class that handles the conversion between RO-Crate metadata and OMERO objects. Users are encouraged to subclass this and override any of the public methods to customize the behavior. Refer to the method documentation for more information.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.conn","title":"<code>conn</code>  <code>instance-attribute</code>","text":"<p>OMERO connection object, typically obtained using <code>from_env</code></p>"},{"location":"docs/api/#omerocrate.OmeroUploader.crate","title":"<code>crate</code>  <code>instance-attribute</code>","text":"<p>Path to the directory containing the crate</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.graph","title":"<code>graph</code>  <code>cached</code> <code>property</code>","text":"<p>RO-Crate metadata as an RDF graph. Typically you don't need to override this method.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.image_query","title":"<code>image_query = '\\n        SELECT ?file_path\\n        WHERE {\\n            ?file_path a schema:MediaObject ;\\n            FILTER (STRAFTER(STR(?file_path), \".\") IN (\"jpg\", \"jpeg\", \"png\", \"tiff\", \"tif\", \"bmp\", \"gif\"))\\n        }\\n    '</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Query for selecting images and their metadata from the crate. Override this to customize the selection. For example, to select only images whose MIME type starts with \"image/\", you can use: <code>sparql     WHERE {         ?file_path a schema:MediaObject ;         schema:encodingFormat ?img_format .         FILTER STRSTARTS(?img_format, \"image/\")     }</code></p>"},{"location":"docs/api/#omerocrate.OmeroUploader.namespaces","title":"<code>namespaces</code>  <code>property</code>","text":"<p>Namespaces/prefixes used in all SPARQL queries. Override this to add or adjust prefixes, e.g. if you are using additional vocabularies.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.root_dataset_id","title":"<code>root_dataset_id</code>  <code>cached</code> <code>property</code>","text":"<p>Returns the ID of the root dataset in the crate. You shouldn't need to override this method as this function should work for any conformant RO-Crate.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.transfer_type","title":"<code>transfer_type = 'upload'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Transfer method, which determines how images are sent to OMERO. <code>ln_s</code> is \"in-place\" importing, but it requires that this process has acess to both the image and permissions to write to the OMERO server.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.connect","title":"<code>connect()</code>","text":"<p>Connects to the OMERO server.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.execute","title":"<code>execute()</code>","text":"<p>Runs the entire processing workflow. Typically you don't need to override this method.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.make_dataset","title":"<code>make_dataset()</code>","text":"<p>Creates the OMERO dataset that correspons to this crate. Override to customize the dataset creation.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.path_from_image_result","title":"<code>path_from_image_result(result)</code>","text":"<p>Converts a SPARQL result row to a Path object.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.process_image","title":"<code>process_image(image, result, dataset)</code>","text":"<p>Handles the processing of a single image extracted from the crate. By default, this does nothing. Override this to e.g. add additional metadata to the image using the <code>image</code> wrapper.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.process_images","title":"<code>process_images(dataset)</code>","text":"<p>Runs the image selection query and processes each result. Typically you don't need to override this method: either <code>process_image</code> or <code>image_query</code> should be enough.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.select_many","title":"<code>select_many(query, namespaces={}, variables={})</code>","text":"<p>Helper method for running a SPARQL query on the RO-Crate metadata that returns multiple results. Typically you don't need to override this method.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.select_one","title":"<code>select_one(query, namespaces={}, variables={})</code>","text":"<p>Helper method for running a SPARQL query on the RO-Crate metadata that should return exactly one result. Typically you don't need to override this method.</p>"},{"location":"docs/api/#omerocrate.OmeroUploader.upload_images","title":"<code>upload_images(image_paths, dataset)</code>","text":"<p>Uploads a set of images to OMERO. You could override this to use a different method of importing images.</p> <p>Parameters:</p> Name Type Description Default <code>image_paths</code> <code>Iterable[Path]</code> <p>Paths to image files to upload</p> required <code>dataset</code> <code>DatasetWrapper</code> <p>OMERO dataset to add the images to</p> required <p>Returns: Wrapped OMERO image object</p>"},{"location":"docs/api/#omerocrate.from_env","title":"<code>omerocrate.from_env()</code>","text":"<p>Authenticate to OMERO using environment variables. You will need to set the following environment variables:</p> <ul> <li><code>OMERO_PASSWORD</code></li> <li><code>OMERO_HOST</code></li> <li><code>OMERO_USER</code> (optional, defaults to the current username)</li> <li><code>OMERO_PORT</code> (optional, defaults to 4064)</li> </ul>"},{"location":"docs/cli/","title":"CLI Reference","text":""},{"location":"docs/cli/#omerocrate","title":"omerocrate","text":"<p>Upload an RO-Crate to OMERO</p> <p>Usage:</p> <pre><code>upload [OPTIONS] CRATE\n</code></pre> <p>Options:</p> <pre><code>  CRATE                 Path to the directory containing the RO-Crate\n                        \\[required]\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n</code></pre>"},{"location":"docs/roadmap/","title":"Roadmap","text":"<ul> <li>[ ] Create OmeROcrate-specific IRIs for configuring the upload</li> </ul>"},{"location":"test/ca-imaging/","title":"RO-Crates from Calcium Imaging Experiments","text":"<p>This repository contains Research Object Crates (RO-Crates) bundling the research data and their retrospective provenance that was transferred from Electronic Lab Notebook (ELN) protocols using an automated structure-based approach. The research data was previously published under the CC-BY 4.0 by:</p> <p>Susanne Staehlke, J. Barbara Nebe. Research data of Calcium Imaging after electrical stimulation.  Zenodo (2021). https://doi.org/10.5281/zenodo.4923173</p> <p>The automated approach to create these bundles is described in full detail in this article:</p> <p>Max Schr\u00f6der, Susanne Staehlke, Paul Groth, J. Barbara Nebe, Sascha Spors, Frank Kr\u00fcger. Structure-based knowledge acquisition from electronic lab notebooks for research data provenance documentation. Journal of Biomedical Semantics 13, 4 (2022). https://doi.org/10.1186/s13326-021-00257-x</p>"},{"location":"test/ca-imaging/#license","title":"License","text":"<p>This work is licensed under a Creative Commons Attribution 4.0 International License.</p> <p>In order to reference this dataset, please consider the information in the CITATION.cff file.</p>"},{"location":"test/ca-imaging/#structure-of-the-repository","title":"Structure of the Repository","text":"<p>The repository contains seven folders that each represents a RO-Crate bundle about a Ca-imaging experiment. The bundle contains a semantic representation of the retrospective provenance of the research data creation (<code>ro-crate-metadata.json</code>), i.e., the Ca-imaging procedure. Furthermore, the research data (<code>Data</code>) and a copy of the ELN protocol and the used resources in the form of HTML files (<code>Protocol</code>) is contained.</p>"}]}