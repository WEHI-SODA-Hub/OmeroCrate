import omero.model
import types
from _typeshed import Incomplete
from omero.api import Save as Save
from omero.cmd import Chgrp2 as Chgrp2, Chown2 as Chown2, Delete2 as Delete2, DoAll as DoAll, SkipHead as SkipHead
from omero.cmd.graphs import ChildOption as ChildOption
from omero.gateway.utils import GatewayConfig as GatewayConfig, ServiceOptsDict as ServiceOptsDict, image_to_html as image_to_html, toBoolean as toBoolean
from omero.model import BooleanAnnotationI as BooleanAnnotationI, CommentAnnotationI as CommentAnnotationI, DoubleAnnotationI as DoubleAnnotationI, FileAnnotationI as FileAnnotationI, LongAnnotationI as LongAnnotationI, MapAnnotationI as MapAnnotationI, TagAnnotationI as TagAnnotationI, TermAnnotationI as TermAnnotationI, TimestampAnnotationI as TimestampAnnotationI, XmlAnnotationI as XmlAnnotationI
from omero.rtypes import rbool as rbool, rdouble as rdouble, rint as rint, rlist as rlist, rlong as rlong, rstring as rstring, rtime as rtime, unwrap as unwrap
from omero.util.decorators import timeit as timeit
from typing import ClassVar

PixelsTypeint8: str
PixelsTypeuint8: str
PixelsTypeint16: str
PixelsTypeuint16: str
PixelsTypeint32: str
PixelsTypeuint32: str
PixelsTypefloat: str
PixelsTypecomplex: str
PixelsTypedouble: str
THISPATH: str
def omero_type(val): ...
def fileread(fin, fsize, bufsize): ...
def fileread_gen(fin, fsize, bufsize): ...
def getAnnotationLinkTableName(objecttype): ...
def getPixelsQuery(imageName): ...
def getChannelsQuery(): ...
def add_plate_filter(clauses, params, opts): ...

class OmeroRestrictionWrapper:
    def canDownload(self): ...

class BlitzObjectWrapper:
    OMERO_CLASS: ClassVar[None] = ...
    LINK_CLASS: ClassVar[None] = ...
    LINK_CHILD: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[None] = ...
    PARENT_WRAPPER_CLASS: ClassVar[None] = ...
    @staticmethod
    def LINK_PARENT(x): ...
    def __init__(self, conn: Incomplete | None = ..., obj: Incomplete | None = ..., cache: Incomplete | None = ..., **kwargs) -> None: ...
    def __eq__(self, a) -> bool: ...
    def __bstrap__(self): ...
    def __prepare__(self, **kwargs): ...
    def __loadedHotSwap__(self): ...
    def findChildByName(self, name, description: Incomplete | None = ...): ...
    def getDetails(self): ...
    def getDate(self): ...
    def save(self): ...
    def saveAs(self, details): ...
    def canWrite(self): ...
    def canOwnerWrite(self): ...
    def isOwned(self): ...
    def isLeaded(self): ...
    def isPublic(self): ...
    def isShared(self): ...
    def isPrivate(self): ...
    def canEdit(self): ...
    def canDelete(self): ...
    def canLink(self): ...
    def canAnnotate(self): ...
    def canChgrp(self): ...
    def canChown(self): ...
    def countChildren(self): ...
    def countChildren_cached(self): ...
    def listChildren(self, ns: Incomplete | None = ..., val: Incomplete | None = ..., params: Incomplete | None = ...): ...
    def getParent(self, withlinks: bool = ...): ...
    def listParents(self, withlinks: bool = ...): ...
    def getAncestry(self): ...
    def getParentLinks(self, pids: Incomplete | None = ...): ...
    def getChildLinks(self, chids: Incomplete | None = ...): ...
    def unlinkAnnotations(self, ns): ...
    def removeAnnotations(self, ns): ...
    def getAnnotation(self, ns: Incomplete | None = ...): ...
    def getAnnotationCounts(self): ...
    def listAnnotations(self, ns: Incomplete | None = ...): ...
    def listOrphanedAnnotations(self, eid: Incomplete | None = ..., ns: Incomplete | None = ..., anntype: Incomplete | None = ..., addedByMe: bool = ...): ...
    def linkAnnotation(self, ann, sameOwner: bool = ...): ...
    def simpleMarshal(self, xtra: Incomplete | None = ..., parents: bool = ...): ...
    def __getattr__(self, attr): ...
    def getId(self): ...
    def getName(self): ...
    def getDescription(self): ...
    def getOwner(self): ...
    def getOwnerFullName(self): ...
    def getOwnerOmeName(self): ...
    def creationEventDate(self): ...
    def updateEventDate(self): ...
    def setName(self, value): ...
    def setDescription(self, value): ...

class NoProxies:
    def __getitem__(self, k): ...
    def values(self): ...

class _BlitzGateway:
    ICE_CONFIG: ClassVar[None] = ...
    def __init__(self, username: Incomplete | None = ..., passwd: Incomplete | None = ..., client_obj: Incomplete | None = ..., group: Incomplete | None = ..., clone: bool = ..., try_super: bool = ..., host: Incomplete | None = ..., port: Incomplete | None = ..., extra_config: Incomplete | None = ..., secure: Incomplete | None = ..., anonymous: bool = ..., useragent: Incomplete | None = ..., userip: Incomplete | None = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def createServiceOptsDict(self): ...
    def setDefaultOmeroGroup(self, defaultOmeroGroup): ...
    def setDefaultOmeroUser(self, defaultOmeroUser): ...
    def getDefaultOmeroGroup(self): ...
    def getDefaultOmeroUser(self): ...
    def getMaxPlaneSize(self): ...
    def getClientSettings(self): ...
    def getRoiLimitSetting(self): ...
    def getInitialZoomLevel(self): ...
    def getInterpolateSetting(self): ...
    def getDownloadAsMaxSizeSetting(self): ...
    def getWebclientHost(self): ...
    def isAnonymous(self): ...
    def getProperty(self, k): ...
    def clone(self): ...
    def setIdentity(self, username, passwd, _internal: bool = ...): ...
    def suConn(self, username, group: Incomplete | None = ..., ttl: int = ...): ...
    def keepAlive(self): ...
    def seppuku(self, softclose: bool = ...): ...
    def close(self, hard: bool = ...): ...
    def setSecure(self, secure: bool = ...): ...
    def isSecure(self): ...
    def connect(self, sUuid: Incomplete | None = ...): ...
    def getLastError(self): ...
    def isConnected(self): ...
    def getEventContext(self): ...
    def getUserId(self): ...
    def setUserId(self, uid): ...
    def getUser(self): ...
    def getAdministrators(self): ...
    def getGroupFromContext(self): ...
    def getCurrentAdminPrivileges(self): ...
    def getAdminPrivileges(self, user_id): ...
    def updateAdminPrivileges(self, exp_id, add: list = ..., remove: list = ...): ...
    def isAdmin(self): ...
    def isFullAdmin(self): ...
    def isLeader(self, gid: Incomplete | None = ...): ...
    def canBeAdmin(self): ...
    def canWrite(self, obj): ...
    def canOwnerWrite(self, obj): ...
    def getSession(self): ...
    def setGroupNameForSession(self, group): ...
    def setGroupForSession(self, groupid): ...
    def revertGroupForSession(self): ...
    def getAdminService(self): ...
    def getQueryService(self): ...
    def getContainerService(self): ...
    def getPixelsService(self): ...
    def getMetadataService(self): ...
    def getRoiService(self): ...
    def getScriptService(self): ...
    def createRawFileStore(self): ...
    def getRepositoryInfoService(self): ...
    def getShareService(self): ...
    def getSharedResources(self): ...
    def getTimelineService(self): ...
    def getTypesService(self): ...
    def getConfigService(self): ...
    def createRenderingEngine(self): ...
    def getRenderingSettingsService(self): ...
    def createRawPixelsStore(self): ...
    def createThumbnailStore(self): ...
    def createSearchService(self): ...
    def getUpdateService(self): ...
    def getSessionService(self): ...
    def createExporter(self): ...
    def canCreate(self): ...
    def listProjects(self, eid: Incomplete | None = ...): ...
    def listScreens(self, eid: Incomplete | None = ...): ...
    def listOrphans(self, obj_type, eid: Incomplete | None = ..., params: Incomplete | None = ..., loadPixels: bool = ...): ...
    def listGroups(self): ...
    def getDefaultGroup(self, eid): ...
    def getOtherGroups(self, eid): ...
    def getGroupsLeaderOf(self): ...
    def getGroupsMemberOf(self): ...
    def createGroup(self, name, owner_Ids: Incomplete | None = ..., member_Ids: Incomplete | None = ..., perms: Incomplete | None = ..., description: Incomplete | None = ..., ldap: bool = ...): ...
    def findExperimenters(self, start: str = ...): ...
    def containedExperimenters(self, gid): ...
    def listColleagues(self): ...
    def groupSummary(self, gid: Incomplete | None = ..., exclude_self: bool = ...): ...
    def listStaffs(self): ...
    def listOwnedGroups(self): ...
    def getFreeSpace(self): ...
    def getFilesetFilesInfo(self, imageIds): ...
    def getArchivedFilesInfo(self, imageIds): ...
    def timelineListImages(self, tfrom: Incomplete | None = ..., tto: Incomplete | None = ..., limit: int = ..., only_owned: bool = ...): ...
    def getObject(self, obj_type, oid: Incomplete | None = ..., params: Incomplete | None = ..., attributes: Incomplete | None = ..., opts: Incomplete | None = ...): ...
    def getObjects(self, obj_type, ids: Incomplete | None = ..., params: Incomplete | None = ..., attributes: Incomplete | None = ..., respect_order: bool = ..., opts: Incomplete | None = ...): ...
    def buildQuery(self, obj_type, ids: Incomplete | None = ..., params: Incomplete | None = ..., attributes: Incomplete | None = ..., opts: Incomplete | None = ...): ...
    def buildCountQuery(self, obj_type, opts: Incomplete | None = ...): ...
    def listFileAnnotations(self, eid: Incomplete | None = ..., toInclude: list = ..., toExclude: list = ...): ...
    def getAnnotationLinks(self, parent_type, parent_ids: Incomplete | None = ..., ann_ids: Incomplete | None = ..., ns: Incomplete | None = ..., params: Incomplete | None = ...): ...
    def countAnnotations(self, obj_type, obj_ids: list = ...): ...
    def listOrphanedAnnotations(self, parent_type, parent_ids, eid: Incomplete | None = ..., ns: Incomplete | None = ..., anntype: Incomplete | None = ..., addedByMe: bool = ...): ...
    def getAnnotationCounts(self, objDict: dict = ...): ...
    def createImageFromNumpySeq(self, zctPlanes, imageName, sizeZ: int = ..., sizeC: int = ..., sizeT: int = ..., description: Incomplete | None = ..., dataset: Incomplete | None = ..., sourceImageId: Incomplete | None = ..., channelList: Incomplete | None = ...): ...
    def applySettingsToSet(self, fromid, to_type, toids): ...
    def setChannelNames(self, data_type, ids, nameDict, channelCount: Incomplete | None = ...): ...
    def createOriginalFileFromFileObj(self, fo, path, name, fileSize, mimetype: Incomplete | None = ..., ns: Incomplete | None = ...): ...
    def createOriginalFileFromLocalFile(self, localPath, origFilePathAndName: Incomplete | None = ..., mimetype: Incomplete | None = ..., ns: Incomplete | None = ...): ...
    def createFileAnnfromLocalFile(self, localPath, origFilePathAndName: Incomplete | None = ..., mimetype: Incomplete | None = ..., ns: Incomplete | None = ..., desc: Incomplete | None = ...): ...
    def getObjectsByAnnotations(self, obj_type, annids): ...
    def getObjectsByMapAnnotations(self, obj_type, key: Incomplete | None = ..., value: Incomplete | None = ..., ns: Incomplete | None = ..., opts: dict = ...): ...
    def getEnumerationEntries(self, klass): ...
    def getEnumeration(self, klass, string): ...
    def getEnumerationById(self, klass, eid): ...
    def getOriginalEnumerations(self): ...
    def getEnumerations(self): ...
    def getEnumerationsWithEntries(self): ...
    def deleteEnumeration(self, obj): ...
    def createEnumeration(self, obj): ...
    def resetEnumerations(self, klass): ...
    def updateEnumerations(self, new_entries): ...
    def deleteObjectDirect(self, obj): ...
    def deleteObject(self, obj): ...
    def deleteObjects(self, graph_spec, obj_ids, deleteAnns: bool = ..., deleteChildren: bool = ..., dryRun: bool = ..., wait: bool = ...): ...
    def chmodGroup(self, group_Id, permissions): ...
    def chgrpObjects(self, graph_spec, obj_ids, group_id, container_id: Incomplete | None = ...): ...
    def chownObjects(self, graph_spec, obj_ids, owner_id, wait: bool = ...): ...
    def searchObjects(self, obj_types, text, created: Incomplete | None = ..., fields: tuple = ..., batchSize: int = ..., page: int = ..., searchGroup: Incomplete | None = ..., ownedBy: Incomplete | None = ..., useAcquisitionDate: bool = ..., rawQuery: bool = ...): ...
    def getThumbnailSet(self, image_ids, max_size: int = ...): ...

class OmeroGatewaySafeCallWrapper:
    def __init__(self, proxyObjectWrapper, attr, f) -> None: ...
    def debug(self, exc_class, args, kwargs): ...
    def handle_exception(self, e, *args, **kwargs): ...
    def __call__(self, *args, **kwargs): ...

class SafeCallWrapper:
    def __init__(self, proxyObjectWrapper, attr, f) -> None: ...
    def debug(self, exc_class, args, kwargs): ...
    def handle_exception(self, e, *args, **kwargs): ...
    def __call__(self, *args, **kwargs): ...

class BlitzGateway:
    ICE_CONFIG: ClassVar[None] = ...
    def __init__(self, username: Incomplete | None = ..., passwd: Incomplete | None = ..., client_obj: Incomplete | None = ..., group: Incomplete | None = ..., clone: bool = ..., try_super: bool = ..., host: Incomplete | None = ..., port: Incomplete | None = ..., extra_config: Incomplete | None = ..., secure: Incomplete | None = ..., anonymous: bool = ..., useragent: Incomplete | None = ..., userip: Incomplete | None = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def createServiceOptsDict(self): ...
    def setDefaultOmeroGroup(self, defaultOmeroGroup): ...
    def setDefaultOmeroUser(self, defaultOmeroUser): ...
    def getDefaultOmeroGroup(self): ...
    def getDefaultOmeroUser(self): ...
    def getMaxPlaneSize(self): ...
    def getClientSettings(self): ...
    def getRoiLimitSetting(self): ...
    def getInitialZoomLevel(self): ...
    def getInterpolateSetting(self): ...
    def getDownloadAsMaxSizeSetting(self): ...
    def getWebclientHost(self): ...
    def isAnonymous(self): ...
    def getProperty(self, k): ...
    def clone(self): ...
    def setIdentity(self, username, passwd, _internal: bool = ...): ...
    def suConn(self, username, group: Incomplete | None = ..., ttl: int = ...): ...
    def keepAlive(self): ...
    def seppuku(self, softclose: bool = ...): ...
    def close(self, hard: bool = ...): ...
    def setSecure(self, secure: bool = ...): ...
    def isSecure(self): ...
    def connect(self, sUuid: Incomplete | None = ...): ...
    def getLastError(self): ...
    def isConnected(self): ...
    def getEventContext(self): ...
    def getUserId(self): ...
    def setUserId(self, uid): ...
    def getUser(self): ...
    def getAdministrators(self): ...
    def getGroupFromContext(self): ...
    def getCurrentAdminPrivileges(self): ...
    def getAdminPrivileges(self, user_id): ...
    def updateAdminPrivileges(self, exp_id, add: list = ..., remove: list = ...): ...
    def isAdmin(self): ...
    def isFullAdmin(self): ...
    def isLeader(self, gid: Incomplete | None = ...): ...
    def canBeAdmin(self): ...
    def canWrite(self, obj): ...
    def canOwnerWrite(self, obj): ...
    def getSession(self): ...
    def setGroupNameForSession(self, group): ...
    def setGroupForSession(self, groupid): ...
    def revertGroupForSession(self): ...
    def getAdminService(self): ...
    def getQueryService(self): ...
    def getContainerService(self): ...
    def getPixelsService(self): ...
    def getMetadataService(self): ...
    def getRoiService(self): ...
    def getScriptService(self): ...
    def createRawFileStore(self): ...
    def getRepositoryInfoService(self): ...
    def getShareService(self): ...
    def getSharedResources(self): ...
    def getTimelineService(self): ...
    def getTypesService(self): ...
    def getConfigService(self): ...
    def createRenderingEngine(self): ...
    def getRenderingSettingsService(self): ...
    def createRawPixelsStore(self): ...
    def createThumbnailStore(self): ...
    def createSearchService(self): ...
    def getUpdateService(self): ...
    def getSessionService(self): ...
    def createExporter(self): ...
    def canCreate(self): ...
    def listProjects(self, eid: Incomplete | None = ...): ...
    def listScreens(self, eid: Incomplete | None = ...): ...
    def listOrphans(self, obj_type, eid: Incomplete | None = ..., params: Incomplete | None = ..., loadPixels: bool = ...): ...
    def listGroups(self): ...
    def getDefaultGroup(self, eid): ...
    def getOtherGroups(self, eid): ...
    def getGroupsLeaderOf(self): ...
    def getGroupsMemberOf(self): ...
    def createGroup(self, name, owner_Ids: Incomplete | None = ..., member_Ids: Incomplete | None = ..., perms: Incomplete | None = ..., description: Incomplete | None = ..., ldap: bool = ...): ...
    def findExperimenters(self, start: str = ...): ...
    def containedExperimenters(self, gid): ...
    def listColleagues(self): ...
    def groupSummary(self, gid: Incomplete | None = ..., exclude_self: bool = ...): ...
    def listStaffs(self): ...
    def listOwnedGroups(self): ...
    def getFreeSpace(self): ...
    def getFilesetFilesInfo(self, imageIds): ...
    def getArchivedFilesInfo(self, imageIds): ...
    def timelineListImages(self, tfrom: Incomplete | None = ..., tto: Incomplete | None = ..., limit: int = ..., only_owned: bool = ...): ...
    def getObject(self, obj_type, oid: Incomplete | None = ..., params: Incomplete | None = ..., attributes: Incomplete | None = ..., opts: Incomplete | None = ...): ...
    def getObjects(self, obj_type, ids: Incomplete | None = ..., params: Incomplete | None = ..., attributes: Incomplete | None = ..., respect_order: bool = ..., opts: Incomplete | None = ...): ...
    def buildQuery(self, obj_type, ids: Incomplete | None = ..., params: Incomplete | None = ..., attributes: Incomplete | None = ..., opts: Incomplete | None = ...): ...
    def buildCountQuery(self, obj_type, opts: Incomplete | None = ...): ...
    def listFileAnnotations(self, eid: Incomplete | None = ..., toInclude: list = ..., toExclude: list = ...): ...
    def getAnnotationLinks(self, parent_type, parent_ids: Incomplete | None = ..., ann_ids: Incomplete | None = ..., ns: Incomplete | None = ..., params: Incomplete | None = ...): ...
    def countAnnotations(self, obj_type, obj_ids: list = ...): ...
    def listOrphanedAnnotations(self, parent_type, parent_ids, eid: Incomplete | None = ..., ns: Incomplete | None = ..., anntype: Incomplete | None = ..., addedByMe: bool = ...): ...
    def getAnnotationCounts(self, objDict: dict = ...): ...
    def createImageFromNumpySeq(self, zctPlanes, imageName, sizeZ: int = ..., sizeC: int = ..., sizeT: int = ..., description: Incomplete | None = ..., dataset: Incomplete | None = ..., sourceImageId: Incomplete | None = ..., channelList: Incomplete | None = ...): ...
    def applySettingsToSet(self, fromid, to_type, toids): ...
    def setChannelNames(self, data_type, ids, nameDict, channelCount: Incomplete | None = ...): ...
    def createOriginalFileFromFileObj(self, fo, path, name, fileSize, mimetype: Incomplete | None = ..., ns: Incomplete | None = ...): ...
    def createOriginalFileFromLocalFile(self, localPath, origFilePathAndName: Incomplete | None = ..., mimetype: Incomplete | None = ..., ns: Incomplete | None = ...): ...
    def createFileAnnfromLocalFile(self, localPath, origFilePathAndName: Incomplete | None = ..., mimetype: Incomplete | None = ..., ns: Incomplete | None = ..., desc: Incomplete | None = ...): ...
    def getObjectsByAnnotations(self, obj_type, annids): ...
    def getObjectsByMapAnnotations(self, obj_type, key: Incomplete | None = ..., value: Incomplete | None = ..., ns: Incomplete | None = ..., opts: dict = ...): ...
    def getEnumerationEntries(self, klass): ...
    def getEnumeration(self, klass, string): ...
    def getEnumerationById(self, klass, eid): ...
    def getOriginalEnumerations(self): ...
    def getEnumerations(self): ...
    def getEnumerationsWithEntries(self): ...
    def deleteEnumeration(self, obj): ...
    def createEnumeration(self, obj): ...
    def resetEnumerations(self, klass): ...
    def updateEnumerations(self, new_entries): ...
    def deleteObjectDirect(self, obj): ...
    def deleteObject(self, obj): ...
    def deleteObjects(self, graph_spec, obj_ids, deleteAnns: bool = ..., deleteChildren: bool = ..., dryRun: bool = ..., wait: bool = ...): ...
    def chmodGroup(self, group_Id, permissions): ...
    def chgrpObjects(self, graph_spec, obj_ids, group_id, container_id: Incomplete | None = ...): ...
    def chownObjects(self, graph_spec, obj_ids, owner_id, wait: bool = ...): ...
    def searchObjects(self, obj_types, text, created: Incomplete | None = ..., fields: tuple = ..., batchSize: int = ..., page: int = ..., searchGroup: Incomplete | None = ..., ownedBy: Incomplete | None = ..., useAcquisitionDate: bool = ..., rawQuery: bool = ...): ...
    def getThumbnailSet(self, image_ids, max_size: int = ...): ...
def splitHTMLColor(color): ...

class ProxyObjectWrapper:
    def __init__(self, conn, func_str, cast_to: Incomplete | None = ..., service_name: Incomplete | None = ...) -> None: ...
    def clone(self): ...
    def taint(self): ...
    def untaint(self): ...
    def close(self, *args, **kwargs): ...
    def __getattr__(self, attr): ...

class AnnotationWrapper(BlitzObjectWrapper):
    registry: ClassVar[dict] = ...
    OMERO_TYPE: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, a) -> bool: ...
    @classmethod
    def createAndLink(cls, target, ns, val: Incomplete | None = ..., sameOwner: bool = ...): ...
    def getNs(self): ...
    def setNs(self, val): ...
    def getValue(self): ...
    def setValue(self, val): ...
    def getParentLinks(self, ptype, pids: Incomplete | None = ...): ...

class _AnnotationLinkWrapper(BlitzObjectWrapper):
    def getAnnotation(self): ...
    def getParent(self): ...

class AnnotationLinkWrapper(BlitzObjectWrapper):
    def getAnnotation(self): ...
    def getParent(self): ...

class FileAnnotationWrapper(AnnotationWrapper, OmeroRestrictionWrapper):
    OMERO_TYPE: ClassVar[type[omero.model.FileAnnotationI]] = ...
    _attrs: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getValue(self): ...
    def setValue(self, val): ...
    def getFile(self): ...
    def setFile(self, originalfile): ...
    def setDescription(self, val): ...
    def isOriginalMetadata(self): ...
    def getFileSize(self): ...
    def getFileName(self): ...
    def getFileInChunks(self, buf: int = ...): ...

class _OriginalFileAsFileObj:
    def __init__(self, originalfile, buf: int = ...) -> None: ...
    def seek(self, n, mode: int = ...): ...
    def tell(self): ...
    def read(self, n: int = ...): ...
    def close(self): ...
    def __iter__(self): ...
    def __enter__(self): ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None): ...

class _OriginalFileWrapper(BlitzObjectWrapper, OmeroRestrictionWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def getFileInChunks(self, buf: int = ...): ...
    def asFileObj(self, buf: int = ...): ...

class OriginalFileWrapper(BlitzObjectWrapper, OmeroRestrictionWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def getFileInChunks(self, buf: int = ...): ...
    def asFileObj(self, buf: int = ...): ...

class TimestampAnnotationWrapper(AnnotationWrapper):
    OMERO_TYPE: ClassVar[type[omero.model.TimestampAnnotationI]] = ...
    def getValue(self): ...
    def setValue(self, val): ...

class BooleanAnnotationWrapper(AnnotationWrapper):
    OMERO_TYPE: ClassVar[type[omero.model.BooleanAnnotationI]] = ...
    def getValue(self): ...
    def setValue(self, val): ...

class TagAnnotationWrapper(AnnotationWrapper):
    OMERO_TYPE: ClassVar[type[omero.model.TagAnnotationI]] = ...
    def countTagsInTagset(self): ...
    def listTagsInTagset(self): ...
    def listParents(self, withlinks: bool = ...): ...
    def getValue(self): ...
    def setValue(self, val): ...

class CommentAnnotationWrapper(AnnotationWrapper):
    OMERO_TYPE: ClassVar[type[omero.model.CommentAnnotationI]] = ...
    def getValue(self): ...
    def setValue(self, val): ...

class LongAnnotationWrapper(AnnotationWrapper):
    OMERO_TYPE: ClassVar[type[omero.model.LongAnnotationI]] = ...
    def getValue(self): ...
    def setValue(self, val): ...

class DoubleAnnotationWrapper(AnnotationWrapper):
    OMERO_TYPE: ClassVar[type[omero.model.DoubleAnnotationI]] = ...
    def getValue(self): ...
    def setValue(self, val): ...

class TermAnnotationWrapper(AnnotationWrapper):
    OMERO_TYPE: ClassVar[type[omero.model.TermAnnotationI]] = ...
    def getValue(self): ...
    def setValue(self, val): ...

class XmlAnnotationWrapper(CommentAnnotationWrapper):
    OMERO_TYPE: ClassVar[type[omero.model.XmlAnnotationI]] = ...

class MapAnnotationWrapper(AnnotationWrapper):
    OMERO_TYPE: ClassVar[type[omero.model.MapAnnotationI]] = ...
    def getValue(self): ...
    def setValue(self, val): ...

class _RoiWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    def getImage(self): ...

class RoiWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    def getImage(self): ...

class _ShapeWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...

class ShapeWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...

class _EnumerationWrapper(BlitzObjectWrapper):
    def getType(self): ...

class EnumerationWrapper(BlitzObjectWrapper):
    def getType(self): ...

class _ExperimenterWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[None] = ...
    PARENT_WRAPPER_CLASS: ClassVar[str] = ...
    def simpleMarshal(self, xtra: Incomplete | None = ..., parents: bool = ...): ...
    def copyGroupExperimenterMap(self): ...
    def __loadedHotSwap__(self): ...
    def getRawPreferences(self): ...
    def setRawPreferences(self, prefs): ...
    def getPreference(self, key, default: str = ..., section: Incomplete | None = ...): ...
    def getPreferences(self, section: Incomplete | None = ...): ...
    def setPreference(self, key, value, section: Incomplete | None = ...): ...
    def getName(self): ...
    def getDescription(self): ...
    def getFullName(self): ...
    def getNameWithInitial(self): ...
    def isAdmin(self): ...
    def isActive(self): ...
    def isGuest(self): ...
    def is_self(self): ...

class ExperimenterWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[None] = ...
    PARENT_WRAPPER_CLASS: ClassVar[str] = ...
    def simpleMarshal(self, xtra: Incomplete | None = ..., parents: bool = ...): ...
    def copyGroupExperimenterMap(self): ...
    def __loadedHotSwap__(self): ...
    def getRawPreferences(self): ...
    def setRawPreferences(self, prefs): ...
    def getPreference(self, key, default: str = ..., section: Incomplete | None = ...): ...
    def getPreferences(self, section: Incomplete | None = ...): ...
    def setPreference(self, key, value, section: Incomplete | None = ...): ...
    def getName(self): ...
    def getDescription(self): ...
    def getFullName(self): ...
    def getNameWithInitial(self): ...
    def isAdmin(self): ...
    def isActive(self): ...
    def isGuest(self): ...
    def is_self(self): ...

class _ExperimenterGroupWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[None] = ...
    def copyGroupExperimenterMap(self): ...
    def __loadedHotSwap__(self): ...
    def groupSummary(self, exclude_self: bool = ...): ...

class ExperimenterGroupWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[None] = ...
    def copyGroupExperimenterMap(self): ...
    def __loadedHotSwap__(self): ...
    def groupSummary(self, exclude_self: bool = ...): ...

class DetailsWrapper(BlitzObjectWrapper):
    def __init__(self, *args, **kwargs) -> None: ...
    def getOwner(self): ...
    def getGroup(self): ...

class _DatasetWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[str] = ...
    def __loadedHotSwap__(self): ...

class DatasetWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[str] = ...
    def __loadedHotSwap__(self): ...

class _ProjectWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[None] = ...

class ProjectWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[None] = ...

class _ScreenWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[None] = ...

class ScreenWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[None] = ...

class _PlateWrapper(BlitzObjectWrapper, OmeroRestrictionWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[None] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[str] = ...
    def __prepare__(self): ...
    def __reset__(self): ...
    def countPlateAcquisitions(self): ...
    def listPlateAcquisitions(self): ...
    def getNumberOfFields(self, *args, **kwargs): ...
    def countChildren(self): ...
    def setGridSizeConstraints(self, row, col): ...
    def getGridSize(self): ...
    def getWellGrid(self, index: int = ...): ...
    def getColumnLabels(self): ...
    def getRowLabels(self): ...
    def exportOmeTiff(self): ...

class PlateWrapper(BlitzObjectWrapper, OmeroRestrictionWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[None] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[str] = ...
    def __prepare__(self): ...
    def __reset__(self): ...
    def countPlateAcquisitions(self): ...
    def listPlateAcquisitions(self): ...
    def getNumberOfFields(self, *args, **kwargs): ...
    def countChildren(self): ...
    def setGridSizeConstraints(self, row, col): ...
    def getGridSize(self): ...
    def getWellGrid(self, index: int = ...): ...
    def getColumnLabels(self): ...
    def getRowLabels(self): ...
    def exportOmeTiff(self): ...

class _PlateAcquisitionWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def getName(self): ...
    def listParents(self, withlinks: bool = ...): ...
    def getStartTime(self): ...
    def getEndTime(self): ...
    @property
    def name(self): ...

class PlateAcquisitionWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def getName(self): ...
    def listParents(self, withlinks: bool = ...): ...
    def getStartTime(self): ...
    def getEndTime(self): ...
    @property
    def name(self): ...

class _WellWrapper(BlitzObjectWrapper, OmeroRestrictionWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[None] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[str] = ...
    def __prepare__(self, **kwargs): ...
    def __reset__(self): ...
    def __loadedHotSwap__(self): ...
    def simpleMarshal(self, xtra: Incomplete | None = ..., parents: bool = ...): ...
    def getWellPos(self): ...
    def listParents(self, withlinks: bool = ...): ...
    def getScreens(self): ...
    def isWellSample(self): ...
    def countWellSample(self): ...
    def getWellSample(self, index: Incomplete | None = ...): ...
    def getImage(self, index: Incomplete | None = ...): ...
    def selectedWellSample(self): ...

class WellWrapper(BlitzObjectWrapper, OmeroRestrictionWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[None] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[str] = ...
    def __prepare__(self, **kwargs): ...
    def __reset__(self): ...
    def __loadedHotSwap__(self): ...
    def simpleMarshal(self, xtra: Incomplete | None = ..., parents: bool = ...): ...
    def getWellPos(self): ...
    def listParents(self, withlinks: bool = ...): ...
    def getScreens(self): ...
    def isWellSample(self): ...
    def countWellSample(self): ...
    def getWellSample(self, index: Incomplete | None = ...): ...
    def getImage(self, index: Incomplete | None = ...): ...
    def selectedWellSample(self): ...

class _WellSampleWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    LINK_CHILD: ClassVar[str] = ...
    @staticmethod
    def LINK_PARENT(link): ...
    def listParents(self, withlinks: bool = ...): ...
    def getImage(self): ...
    def image(self): ...
    def getPlateAcquisition(self): ...

class WellSampleWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    CHILD_WRAPPER_CLASS: ClassVar[str] = ...
    PARENT_WRAPPER_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[str] = ...
    LINK_CHILD: ClassVar[str] = ...
    @staticmethod
    def LINK_PARENT(link): ...
    def listParents(self, withlinks: bool = ...): ...
    def getImage(self): ...
    def image(self): ...
    def getPlateAcquisition(self): ...

class ColorHolder:
    _color: ClassVar[dict] = ...
    def __init__(self, colorname: Incomplete | None = ...) -> None: ...
    @classmethod
    def fromRGBA(cls, r, g, b, a): ...
    def getRed(self): ...
    def setRed(self, val): ...
    def getGreen(self): ...
    def setGreen(self, val): ...
    def getBlue(self): ...
    def setBlue(self, val): ...
    def getAlpha(self): ...
    def setAlpha(self, val): ...
    def getHtml(self): ...
    def getCss(self): ...
    def getRGB(self): ...
    def getInt(self): ...

class _LogicalChannelWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    def __loadedHotSwap__(self): ...
    def getLightPath(self): ...

class LogicalChannelWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    def __loadedHotSwap__(self): ...
    def getLightPath(self): ...

class _LightPathWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getExcitationFilters(self): ...
    def getEmissionFilters(self): ...

class LightPathWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getExcitationFilters(self): ...
    def getEmissionFilters(self): ...

class _PlaneInfoWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def getDeltaT(self, units: Incomplete | None = ...): ...
    def getExposureTime(self, units: Incomplete | None = ...): ...

class PlaneInfoWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def getDeltaT(self, units: Incomplete | None = ...): ...
    def getExposureTime(self, units: Incomplete | None = ...): ...

class _PixelsWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def getPixelsType(self): ...
    def copyPlaneInfo(self, theC: Incomplete | None = ..., theT: Incomplete | None = ..., theZ: Incomplete | None = ...): ...
    def getPlanes(self, zctList): ...
    def getPlane(self, theZ: int = ..., theC: int = ..., theT: int = ...): ...
    def getTiles(self, zctTileList): ...
    def getTile(self, theZ: int = ..., theC: int = ..., theT: int = ..., tile: Incomplete | None = ...): ...

class PixelsWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def getPixelsType(self): ...
    def copyPlaneInfo(self, theC: Incomplete | None = ..., theT: Incomplete | None = ..., theZ: Incomplete | None = ...): ...
    def getPlanes(self, zctList): ...
    def getPlane(self, theZ: int = ..., theC: int = ..., theT: int = ...): ...
    def getTiles(self, zctTileList): ...
    def getTile(self, theZ: int = ..., theC: int = ..., theT: int = ..., tile: Incomplete | None = ...): ...

class _FilesetWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def copyImages(self): ...
    def listFiles(self): ...

class FilesetWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def copyImages(self): ...
    def listFiles(self): ...

class _ChannelWrapper(BlitzObjectWrapper):
    BLUE_MIN: ClassVar[int] = ...
    BLUE_MAX: ClassVar[int] = ...
    GREEN_MIN: ClassVar[int] = ...
    GREEN_MAX: ClassVar[int] = ...
    RED_MIN: ClassVar[int] = ...
    RED_MAX: ClassVar[int] = ...
    COLOR_MAP: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def __prepare__(self, idx: int = ..., re: Incomplete | None = ..., img: Incomplete | None = ...): ...
    def save(self): ...
    def isActive(self): ...
    def getLogicalChannel(self): ...
    def getLabel(self): ...
    def getName(self): ...
    def getEmissionWave(self, units: Incomplete | None = ...): ...
    def getExcitationWave(self, units: Incomplete | None = ...): ...
    def getColor(self): ...
    def getLut(self): ...
    def getWindowStart(self): ...
    def setWindowStart(self, val): ...
    def getWindowEnd(self): ...
    def setWindowEnd(self, val): ...
    def setWindow(self, minval, maxval): ...
    def getWindowMin(self): ...
    def getWindowMax(self): ...
    def isReverseIntensity(self): ...
    def isInverted(self): ...
    def getFamily(self): ...
    def getCoefficient(self): ...

class ChannelWrapper(BlitzObjectWrapper):
    BLUE_MIN: ClassVar[int] = ...
    BLUE_MAX: ClassVar[int] = ...
    GREEN_MIN: ClassVar[int] = ...
    GREEN_MAX: ClassVar[int] = ...
    RED_MIN: ClassVar[int] = ...
    RED_MAX: ClassVar[int] = ...
    COLOR_MAP: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def __prepare__(self, idx: int = ..., re: Incomplete | None = ..., img: Incomplete | None = ...): ...
    def save(self): ...
    def isActive(self): ...
    def getLogicalChannel(self): ...
    def getLabel(self): ...
    def getName(self): ...
    def getEmissionWave(self, units: Incomplete | None = ...): ...
    def getExcitationWave(self, units: Incomplete | None = ...): ...
    def getColor(self): ...
    def getLut(self): ...
    def getWindowStart(self): ...
    def setWindowStart(self, val): ...
    def getWindowEnd(self): ...
    def setWindowEnd(self, val): ...
    def setWindow(self, minval, maxval): ...
    def getWindowMin(self): ...
    def getWindowMax(self): ...
    def isReverseIntensity(self): ...
    def isInverted(self): ...
    def getFamily(self): ...
    def getCoefficient(self): ...

class assert_re:
    def __init__(self, onPrepareFailureReturnNone: bool = ..., ignoreExceptions: Incomplete | None = ...) -> None: ...
    def __call__(self, ctx, f): ...
def assert_pixels(func): ...

class _ImageWrapper(BlitzObjectWrapper, OmeroRestrictionWrapper):
    _re: ClassVar[None] = ...
    _pd: ClassVar[None] = ...
    _rm: ClassVar[dict] = ...
    _qf: ClassVar[dict] = ...
    _pixels: ClassVar[None] = ...
    _archivedFileCount: ClassVar[None] = ...
    _filesetFileCount: ClassVar[None] = ...
    _importedFilesInfo: ClassVar[None] = ...
    _pr: ClassVar[None] = ...
    _prStart: ClassVar[None] = ...
    _prEnd: ClassVar[None] = ...
    _invertedAxis: ClassVar[bool] = ...
    PROJECTIONS: ClassVar[dict] = ...
    PLANEDEF: ClassVar[int] = ...
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[None] = ...
    CHILD_WRAPPER_CLASS: ClassVar[None] = ...
    PARENT_WRAPPER_CLASS: ClassVar[list] = ...
    _thumbInProgress: ClassVar[bool] = ...
    LINE_PLOT_DTYPES: ClassVar[dict] = ...
    LP_PALLETE: ClassVar[list] = ...
    LP_TRANSPARENT: ClassVar[int] = ...
    LP_BGCOLOR: ClassVar[int] = ...
    LP_FGCOLOR: ClassVar[int] = ...
    @classmethod
    def fromPixelsId(cls, conn, pid): ...
    def __loadedHotSwap__(self): ...
    def getAcquisitionDate(self): ...
    def getInstrument(self): ...
    def resetRDefs(self): ...
    def simpleMarshal(self, xtra: Incomplete | None = ..., parents: bool = ...): ...
    def getStageLabel(self): ...
    def shortname(self, length: int = ..., hist: int = ...): ...
    def getAuthor(self): ...
    def getProject(self): ...
    def getPlate(self): ...
    def getObjectiveSettings(self): ...
    def getImagingEnvironment(self): ...
    def getPixelsId(self, *args, **kwargs): ...
    def loadOriginalMetadata(self, sort: bool = ...): ...
    def getThumbnail(self, size: tuple = ..., z: Incomplete | None = ..., t: Incomplete | None = ..., direct: bool = ..., rdefId: Incomplete | None = ...): ...
    def getPixelRange(self, *args, **kwargs): ...
    def getPrimaryPixels(self, *args, **kwargs): ...
    def getThumbVersion(self, *args, **kwargs): ...
    def getChannels(self, noRE: bool = ...): ...
    def getChannelLabels(self): ...
    def getZoomLevelScaling(self, *args, **kwargs): ...
    def set_active_channels(self, *args, **kwargs): ...
    def setActiveChannels(self, *args, **kwargs): ...
    def getProjections(self): ...
    def getProjection(self): ...
    def setProjection(self, proj): ...
    def getProjectionRange(self): ...
    def setProjectionRange(self, projStart, projEnd): ...
    def isInvertedAxis(self): ...
    def setInvertedAxis(self, inverted): ...
    def getHistogram(self, *args, **kwargs): ...
    def getPixelLine(self, z, t, pos, axis, channels: Incomplete | None = ..., range: Incomplete | None = ...): ...
    def getRow(self, z, t, y, channels: Incomplete | None = ..., range: Incomplete | None = ...): ...
    def getCol(self, z, t, x, channels: Incomplete | None = ..., range: Incomplete | None = ...): ...
    def getRenderingModels(self): ...
    def getRenderingModel(self, *args, **kwargs): ...
    def setGreyscaleRenderingModel(self, *args, **kwargs): ...
    def setColorRenderingModel(self, *args, **kwargs): ...
    def isGreyscaleRenderingModel(self): ...
    def setReverseIntensity(self, *args, **kwargs): ...
    def setChannelInverted(self, *args, **kwargs): ...
    def getFamilies(self): ...
    def setQuantizationMap(self, *args, **kwargs): ...
    def setQuantizationMaps(self, *args, **kwargs): ...
    def getRenderingDefId(self, *args, **kwargs): ...
    def getAllRenderingDefs(self, eid: int = ...): ...
    def renderBirdsEyeView(self, *args, **kwargs): ...
    def renderJpegRegion(self, *args, **kwargs): ...
    def renderJpeg(self, *args, **kwargs): ...
    def exportOmeTiff(self, bufsize: int = ...): ...
    def createMovie(self, *args, **kwargs): ...
    def renderImage(self, z, t, compression: float = ...): ...
    def renderSplitChannel(self, z, t, compression: float = ..., border: int = ...): ...
    def splitChannelDims(self, border: int = ...): ...
    def renderSplitChannelImage(self, z, t, compression: float = ..., border: int = ...): ...
    def prepareLinePlotCanvas(self): ...
    def renderRowLinePlotGif(self, *args, **kwargs): ...
    def renderColLinePlotGif(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def getT(self, *args, **kwargs): ...
    def getDefaultZ(self, *args, **kwargs): ...
    def getDefaultT(self, *args, **kwargs): ...
    def setDefaultZ(self, *args, **kwargs): ...
    def setDefaultT(self, *args, **kwargs): ...
    def getPixelsType(self, *args, **kwargs): ...
    def getPixelSizeX(self, *args, **kwargs): ...
    def getPixelSizeY(self, *args, **kwargs): ...
    def getPixelSizeZ(self, *args, **kwargs): ...
    def getSizeX(self, *args, **kwargs): ...
    def getSizeY(self, *args, **kwargs): ...
    def getSizeZ(self, *args, **kwargs): ...
    def getSizeT(self, *args, **kwargs): ...
    def getSizeC(self, *args, **kwargs): ...
    def requiresPixelsPyramid(self): ...
    def clearDefaults(self): ...
    def loadRenderOptions(self): ...
    def saveDefaults(self, *args, **kwargs): ...
    def resetDefaults(self, *args, **kwargs): ...
    def countArchivedFiles(self): ...
    def countFilesetFiles(self): ...
    def getImportedFilesInfo(self): ...
    def countImportedImageFiles(self): ...
    def getArchivedFiles(self): ...
    def getImportedImageFiles(self): ...
    def getImportedImageFilePaths(self): ...
    def getFileset(self): ...
    def getInplaceImport(self): ...
    def getROIs(self, shapeType: Incomplete | None = ..., filterByCurrentUser: bool = ...): ...
    def getROICount(self, shapeType: Incomplete | None = ..., filterByCurrentUser: bool = ...): ...

class ImageWrapper(BlitzObjectWrapper, OmeroRestrictionWrapper):
    _re: ClassVar[None] = ...
    _pd: ClassVar[None] = ...
    _rm: ClassVar[dict] = ...
    _qf: ClassVar[dict] = ...
    _pixels: ClassVar[None] = ...
    _archivedFileCount: ClassVar[None] = ...
    _filesetFileCount: ClassVar[None] = ...
    _importedFilesInfo: ClassVar[None] = ...
    _pr: ClassVar[None] = ...
    _prStart: ClassVar[None] = ...
    _prEnd: ClassVar[None] = ...
    _invertedAxis: ClassVar[bool] = ...
    PROJECTIONS: ClassVar[dict] = ...
    PLANEDEF: ClassVar[int] = ...
    OMERO_CLASS: ClassVar[str] = ...
    LINK_CLASS: ClassVar[None] = ...
    CHILD_WRAPPER_CLASS: ClassVar[None] = ...
    PARENT_WRAPPER_CLASS: ClassVar[list] = ...
    _thumbInProgress: ClassVar[bool] = ...
    LINE_PLOT_DTYPES: ClassVar[dict] = ...
    LP_PALLETE: ClassVar[list] = ...
    LP_TRANSPARENT: ClassVar[int] = ...
    LP_BGCOLOR: ClassVar[int] = ...
    LP_FGCOLOR: ClassVar[int] = ...
    @classmethod
    def fromPixelsId(cls, conn, pid): ...
    def __loadedHotSwap__(self): ...
    def getAcquisitionDate(self): ...
    def getInstrument(self): ...
    def resetRDefs(self): ...
    def simpleMarshal(self, xtra: Incomplete | None = ..., parents: bool = ...): ...
    def getStageLabel(self): ...
    def shortname(self, length: int = ..., hist: int = ...): ...
    def getAuthor(self): ...
    def getProject(self): ...
    def getPlate(self): ...
    def getObjectiveSettings(self): ...
    def getImagingEnvironment(self): ...
    def getPixelsId(self, *args, **kwargs): ...
    def loadOriginalMetadata(self, sort: bool = ...): ...
    def getThumbnail(self, size: tuple = ..., z: Incomplete | None = ..., t: Incomplete | None = ..., direct: bool = ..., rdefId: Incomplete | None = ...): ...
    def getPixelRange(self, *args, **kwargs): ...
    def getPrimaryPixels(self, *args, **kwargs): ...
    def getThumbVersion(self, *args, **kwargs): ...
    def getChannels(self, noRE: bool = ...): ...
    def getChannelLabels(self): ...
    def getZoomLevelScaling(self, *args, **kwargs): ...
    def set_active_channels(self, *args, **kwargs): ...
    def setActiveChannels(self, *args, **kwargs): ...
    def getProjections(self): ...
    def getProjection(self): ...
    def setProjection(self, proj): ...
    def getProjectionRange(self): ...
    def setProjectionRange(self, projStart, projEnd): ...
    def isInvertedAxis(self): ...
    def setInvertedAxis(self, inverted): ...
    def getHistogram(self, *args, **kwargs): ...
    def getPixelLine(self, z, t, pos, axis, channels: Incomplete | None = ..., range: Incomplete | None = ...): ...
    def getRow(self, z, t, y, channels: Incomplete | None = ..., range: Incomplete | None = ...): ...
    def getCol(self, z, t, x, channels: Incomplete | None = ..., range: Incomplete | None = ...): ...
    def getRenderingModels(self): ...
    def getRenderingModel(self, *args, **kwargs): ...
    def setGreyscaleRenderingModel(self, *args, **kwargs): ...
    def setColorRenderingModel(self, *args, **kwargs): ...
    def isGreyscaleRenderingModel(self): ...
    def setReverseIntensity(self, *args, **kwargs): ...
    def setChannelInverted(self, *args, **kwargs): ...
    def getFamilies(self): ...
    def setQuantizationMap(self, *args, **kwargs): ...
    def setQuantizationMaps(self, *args, **kwargs): ...
    def getRenderingDefId(self, *args, **kwargs): ...
    def getAllRenderingDefs(self, eid: int = ...): ...
    def renderBirdsEyeView(self, *args, **kwargs): ...
    def renderJpegRegion(self, *args, **kwargs): ...
    def renderJpeg(self, *args, **kwargs): ...
    def exportOmeTiff(self, bufsize: int = ...): ...
    def createMovie(self, *args, **kwargs): ...
    def renderImage(self, z, t, compression: float = ...): ...
    def renderSplitChannel(self, z, t, compression: float = ..., border: int = ...): ...
    def splitChannelDims(self, border: int = ...): ...
    def renderSplitChannelImage(self, z, t, compression: float = ..., border: int = ...): ...
    def prepareLinePlotCanvas(self): ...
    def renderRowLinePlotGif(self, *args, **kwargs): ...
    def renderColLinePlotGif(self, *args, **kwargs): ...
    def getZ(self, *args, **kwargs): ...
    def getT(self, *args, **kwargs): ...
    def getDefaultZ(self, *args, **kwargs): ...
    def getDefaultT(self, *args, **kwargs): ...
    def setDefaultZ(self, *args, **kwargs): ...
    def setDefaultT(self, *args, **kwargs): ...
    def getPixelsType(self, *args, **kwargs): ...
    def getPixelSizeX(self, *args, **kwargs): ...
    def getPixelSizeY(self, *args, **kwargs): ...
    def getPixelSizeZ(self, *args, **kwargs): ...
    def getSizeX(self, *args, **kwargs): ...
    def getSizeY(self, *args, **kwargs): ...
    def getSizeZ(self, *args, **kwargs): ...
    def getSizeT(self, *args, **kwargs): ...
    def getSizeC(self, *args, **kwargs): ...
    def requiresPixelsPyramid(self): ...
    def clearDefaults(self): ...
    def loadRenderOptions(self): ...
    def saveDefaults(self, *args, **kwargs): ...
    def resetDefaults(self, *args, **kwargs): ...
    def countArchivedFiles(self): ...
    def countFilesetFiles(self): ...
    def getImportedFilesInfo(self): ...
    def countImportedImageFiles(self): ...
    def getArchivedFiles(self): ...
    def getImportedImageFiles(self): ...
    def getImportedImageFilePaths(self): ...
    def getFileset(self): ...
    def getInplaceImport(self): ...
    def getROIs(self, shapeType: Incomplete | None = ..., filterByCurrentUser: bool = ...): ...
    def getROICount(self, shapeType: Incomplete | None = ..., filterByCurrentUser: bool = ...): ...

class _ImageStageLabelWrapper(BlitzObjectWrapper): ...
class ImageStageLabelWrapper(BlitzObjectWrapper): ...
class _ImagingEnvironmentWrapper(BlitzObjectWrapper): ...
class ImagingEnvironmentWrapper(BlitzObjectWrapper): ...

class _ImagingEnviromentWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...

class ImagingEnviromentWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...

class _TransmittanceRangeWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...

class TransmittanceRangeWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...

class _DetectorSettingsWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...

class DetectorSettingsWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...

class _BinningWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...

class BinningWrapper(BlitzObjectWrapper):
    OMERO_CLASS: ClassVar[str] = ...

class _DetectorWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getDetectorType(self): ...

class DetectorWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getDetectorType(self): ...

class _ObjectiveWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getImmersion(self): ...
    def getCorrection(self): ...
    def getIris(self): ...

class ObjectiveWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getImmersion(self): ...
    def getCorrection(self): ...
    def getIris(self): ...

class _ObjectiveSettingsWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getObjective(self): ...
    def getMedium(self): ...

class ObjectiveSettingsWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getObjective(self): ...
    def getMedium(self): ...

class _FilterWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getFilterType(self): ...

class FilterWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getFilterType(self): ...

class _DichroicWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...

class DichroicWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...

class _FilterSetWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def copyEmissionFilters(self): ...
    def copyExcitationFilters(self): ...

class FilterSetWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def copyEmissionFilters(self): ...
    def copyExcitationFilters(self): ...

class _OTFWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...

class OTFWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...

class _LightSettingsWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getLightSource(self): ...

class LightSettingsWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getLightSource(self): ...

class _LightSourceWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    def getLightSourceType(self): ...
def LightSourceWrapper(conn, obj, **kwargs): ...

class _FilamentWrapper(_LightSourceWrapper):
    OMERO_CLASS: ClassVar[str] = ...

class FilamentWrapper(_LightSourceWrapper):
    OMERO_CLASS: ClassVar[str] = ...

class _ArcWrapper(_FilamentWrapper):
    OMERO_CLASS: ClassVar[str] = ...

class ArcWrapper(_FilamentWrapper):
    OMERO_CLASS: ClassVar[str] = ...

class _LaserWrapper(_LightSourceWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def __bstrap__(self): ...
    def getLaserMedium(self): ...
    def getPump(self): ...

class LaserWrapper(_LightSourceWrapper):
    OMERO_CLASS: ClassVar[str] = ...
    def __bstrap__(self): ...
    def getLaserMedium(self): ...
    def getPump(self): ...

class _LightEmittingDiodeWrapper(_LightSourceWrapper):
    OMERO_CLASS: ClassVar[str] = ...

class LightEmittingDiodeWrapper(_LightSourceWrapper):
    OMERO_CLASS: ClassVar[str] = ...

class _MicroscopeWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getMicroscopeType(self): ...

class MicroscopeWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getMicroscopeType(self): ...

class _InstrumentWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getMicroscope(self): ...
    def getDetectors(self): ...
    def getObjectives(self): ...
    def getFilters(self): ...
    def getDichroics(self): ...
    def getFilterSets(self): ...
    def getOTFs(self): ...
    def getLightSources(self): ...
    def simpleMarshal(self): ...

class InstrumentWrapper(BlitzObjectWrapper):
    _attrs: ClassVar[tuple] = ...
    OMERO_CLASS: ClassVar[str] = ...
    def getMicroscope(self): ...
    def getDetectors(self): ...
    def getObjectives(self): ...
    def getFilters(self): ...
    def getDichroics(self): ...
    def getFilterSets(self): ...
    def getOTFs(self): ...
    def getLightSources(self): ...
    def simpleMarshal(self): ...
KNOWN_WRAPPERS: dict
def refreshWrappers(): ...
